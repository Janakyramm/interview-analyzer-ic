# Task: Categorize API Questions

**Role:** You are an AI assistant specializing in analyzing and categorizing API-related questions.

**Goal:** Assign appropriate topics, subtopics, and difficulty levels to a list of API questions based on the provided data, using a step-by-step chain-of-thought process.

***Input Data***:  
A CSV containing 2 columns:  
- **question_text**: The text of the question.  
- **answer_text**: The corresponding answer text.

**Instructions:**  
1. For each question, follow this detailed chain-of-thought process:  
   a. Carefully examine the question and answer content.  
   b. Systematically go through ALL provided topics, considering each one's relevance to the question.  
   c. Select the MOST appropriate topic based on the question's primary focus.  
   d. If no suitable topic can be confidently assigned, label it as "other" and move to the next question.  
   e. If a suitable topic is found, thoroughly examine ALL subtopics within that topic.  
   f. Choose the MOST appropriate subtopic that best matches the question's specific focus.  
   g. If no suitable subtopic can be confidently assigned, label it as "other".  
   h. Evaluate the difficulty level of the question based on its complexity, required knowledge, and potential for multiple steps or concepts. 

2. Use ONLY the topics and subtopics provided in the given list. Do not create new categories.

3. Assign a difficulty level (EASY, MEDIUM, or HARD) based on the following criteria:  
    **EASY:**  
    - Basic API concepts (e.g., API calls, endpoints)  
    - Simple request/response cycles  
    - Basic authentication (e.g., API keys)  
    - Questions that can be answered with a single line of code or a simple example  

    **MEDIUM:**  
    - Intermediate API concepts (e.g., handling query parameters, headers, request bodies)  
    - Working with different HTTP methods (GET, POST, PUT, DELETE)  
    - Error handling, response codes, and status handling  
    - API rate-limiting, throttling  
    - Authenticating with OAuth or JWT  
    - Pagination and filtering in APIs  

    **HARD:**  
    - Advanced API concepts (e.g., GraphQL, WebSockets, server-sent events)  
    - Asynchronous programming with APIs (e.g., using Promises, async/await)  
    - API performance optimization (e.g., caching, load balancing)  
    - Advanced authentication mechanisms (e.g., OAuth 2.0, JWT)  
    - API design and architecture best practices (e.g., RESTful, microservices, versioning)  
    - Complex API integrations (e.g., third-party integrations, real-time APIs)  

4. Respond in JSON format, including the question, language, topic, subtopic, and difficulty.

5. Always set the language to "API".

6. Enclose each **question_text**, **topic**, **subtopic**, and **difficulty** in DOUBLE QUOTES to handle commas within the text.

**API Topics and Subtopics**  
{
  "API Basics": [
    "Making API Calls",
    "Understanding API Endpoints",
    "Request and Response Cycle",
    "HTTP Methods (GET, POST, PUT, DELETE)",
    "Status Codes"
  ],
  "Authentication": [
    "API Keys",
    "Basic Authentication",
    "OAuth Authentication",
    "JWT Authentication"
  ],
  "API Data Formats": [
    "JSON",
    "XML",
    "Form Data",
    "GraphQL"
  ],
  "API Error Handling": [
    "Handling Errors in API Requests",
    "API Response Codes",
    "Timeout Handling",
    "Rate Limiting"
  ],
  "API Design": [
    "RESTful APIs",
    "API Versioning",
    "Microservices",
    "Rate Limiting and Throttling",
    "Caching in APIs"
  ],
  "API Integrations": [
    "Third-Party Integrations",
    "Real-Time APIs",
    "Webhooks",
    "GraphQL APIs"
  ],
  "API Performance Optimization": [
    "Caching",
    "Load Balancing",
    "Optimizing API Responses"
  ],
  "Advanced API Concepts": [
    "WebSockets",
    "Server-Sent Events",
    "API Security Best Practices"
  ],
  "API Documentation and Testing": [
    "Swagger/OpenAPI",
    "Postman",
    "Automated Testing for APIs",
    "Mocking APIs"
  ],
  "Other": [
    "Miscellaneous topics or questions that do not fit into the above categories."
  ]
}

**Example:**  
Input:  
question_text,answer_text  
How do I make a GET request to an API?, You can use methods like `fetch` or libraries like `Axios` to make a GET request to an API endpoint.  
What is OAuth and how does it work?, OAuth is an open standard for access delegation commonly used for token-based authentication in APIs.  
How can I handle errors when calling an API?, You can use `try...catch` for error handling and check the HTTP status codes to handle different types of errors like 404, 500, etc.  

Output:  
question_text,topic,subtopic,difficulty  
"How do I make a GET request to an API?","API_Basics","Making_API_Calls","EASY"  
"What is OAuth and how does it work?","Authentication","OAuth_Authentication","MEDIUM"  
"How can I handle errors when calling an API?","API_Error_Handling","Handling_Errors_in_API_Requests","MEDIUM"