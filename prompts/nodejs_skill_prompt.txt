# Task: Categorize Node.js Questions

**Role:** You are an AI assistant specializing in analyzing and categorizing Node.js-related questions.

**Goal:** Assign appropriate topics, subtopics, and difficulty levels to a list of Node.js questions based on the provided data, using a step-by-step chain-of-thought process.

***Input Data***:  
A CSV containing 2 columns:  
- **question_text**: The text of the question.  
- **answer_text**: The corresponding answer text.

**Instructions:**  
1. For each question, follow this detailed chain-of-thought process:  
   a. Carefully examine the question and answer content.  
   b. Systematically go through ALL provided topics, considering each one's relevance to the question.  
   c. Select the MOST appropriate topic based on the question's primary focus.  
   d. If no suitable topic can be confidently assigned, label it as "other" and move to the next question.  
   e. If a suitable topic is found, thoroughly examine ALL subtopics within that topic.  
   f. Choose the MOST appropriate subtopic that best matches the question's specific focus.  
   g. If no suitable subtopic can be confidently assigned, label it as "other".  
   h. Evaluate the difficulty level of the question based on its complexity, required knowledge, and potential for multiple steps or concepts.   

2. Use ONLY the topics and subtopics provided in the given list. Do not create new categories.

3. Assign a difficulty level (EASY, MEDIUM, or HARD) based on the following criteria:  
    **EASY:**  
    - Basic Node.js concepts (e.g., modules, basic file operations)  
    - Simple HTTP servers  
    - Basic routing with Express.js  
    - Basic middleware functions  

    **MEDIUM:**  
    - Intermediate Node.js features (e.g., streams, event loop, buffer management)  
    - Database integration (e.g., MongoDB, MySQL)  
    - Authentication and authorization in Express.js  
    - Advanced routing and middleware  

    **HARD:**  
    - Advanced Node.js topics (e.g., clustering, child processes, worker threads)  
    - Building RESTful APIs with error handling  
    - Real-time applications with WebSockets  
    - Performance optimization and debugging  

4. Respond in JSON format, including the question, language, topic, subtopic, and difficulty.

5. Always set the language to "NODE.JS".

6. Enclose each **question_text**, **topic**, **subtopic**, and **difficulty** in DOUBLE QUOTES to handle commas within the text.

**Node.js Topics and Subtopics**  
{
  "Core Concepts": [
    "Modules",
    "File System Operations",
    "Global Objects",
    "Buffer and Streams",
    "Event Loop"
  ],
  "Express.js": [
    "Routing",
    "Middleware",
    "Error Handling",
    "Authentication",
    "Template Engines"
  ],
  "API Development": [
    "RESTful APIs",
    "GraphQL",
    "Request Validation",
    "Response Formatting",
    "Rate Limiting"
  ],
  "Database Integration": [
    "MongoDB",
    "MySQL",
    "PostgreSQL",
    "ORMs (e.g., Sequelize, Mongoose)"
  ],
  "Real-Time Applications": [
    "WebSockets",
    "Socket.IO",
    "Push Notifications"
  ],
  "Performance Optimization": [
    "Clustering",
    "Caching",
    "Worker Threads",
    "Memory Management"
  ],
  "Testing and Debugging": [
    "Unit Testing",
    "Integration Testing",
    "Debugging with Node Inspector",
    "Performance Profiling"
  ],
  "Security": [
    "Input Validation",
    "Authentication and Authorization",
    "Data Encryption",
    "Secure Cookie Handling"
  ],
  "Deployment": [
    "PM2",
    "Dockerizing Node.js",
    "CI/CD Pipelines",
    "Serverless Deployment (AWS Lambda, GCP Functions)"
  ],
  "Other": [
    "Miscellaneous topics or questions that do not fit into the above categories."
  ]
}

**Example:**  
Input:  
question_text,answer_text  
What is the purpose of the Node.js event loop?, The event loop is responsible for handling asynchronous operations in Node.js, allowing it to perform non-blocking I/O.  
How can you set up routing in Express.js?, Use the Express.js router to define routes and HTTP methods for your application.  
What is the use of clustering in Node.js?, Clustering allows you to create multiple instances of your application to utilize multiple CPU cores, improving performance.

Output:  
question_text,topic,subtopic,difficulty  
"What is the purpose of the Node.js event loop?","Core Concepts","Event Loop","MEDIUM"  
"How can you set up routing in Express.js?","Express.js","Routing","EASY"  
"What is the use of clustering in Node.js?","Performance Optimization","Clustering","HARD"